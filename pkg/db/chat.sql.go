// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: chat.sql

package db

import (
	"context"
)

const getChat = `-- name: GetChat :one
SELECT id, name, organisation_id, updated_at, created_at
FROM chats
WHERE organisation_id = $1 AND id = $2
`

type GetChatParams struct {
	OrganisationID string `json:"organisation_id"`
	ID             string `json:"id"`
}

func (q *Queries) GetChat(ctx context.Context, arg GetChatParams) (Chat, error) {
	row := q.db.QueryRowContext(ctx, getChat, arg.OrganisationID, arg.ID)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganisationID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getChatUser = `-- name: GetChatUser :one
SELECT id, chat_id, user_id, organisation_id
FROM chat_users
WHERE chat_id = $1 AND organisation_id = $2 AND user_id = $3
`

type GetChatUserParams struct {
	ChatID         string `json:"chat_id"`
	OrganisationID string `json:"organisation_id"`
	UserID         string `json:"user_id"`
}

func (q *Queries) GetChatUser(ctx context.Context, arg GetChatUserParams) (ChatUser, error) {
	row := q.db.QueryRowContext(ctx, getChatUser, arg.ChatID, arg.OrganisationID, arg.UserID)
	var i ChatUser
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.UserID,
		&i.OrganisationID,
	)
	return i, err
}

const listChatMessages = `-- name: ListChatMessages :many
SELECT id, chat_id, user_id, message, organisation_id, updated_at, created_at
FROM chat_messages
WHERE chat_id = $1 AND organisation_id = $2
`

type ListChatMessagesParams struct {
	ChatID         string `json:"chat_id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) ListChatMessages(ctx context.Context, arg ListChatMessagesParams) ([]ChatMessage, error) {
	rows, err := q.db.QueryContext(ctx, listChatMessages, arg.ChatID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMessage
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.UserID,
			&i.Message,
			&i.OrganisationID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChatUsers = `-- name: ListChatUsers :many
SELECT id, chat_id, user_id, organisation_id
FROM chat_users
WHERE chat_id = $1 AND organisation_id = $2
`

type ListChatUsersParams struct {
	ChatID         string `json:"chat_id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) ListChatUsers(ctx context.Context, arg ListChatUsersParams) ([]ChatUser, error) {
	rows, err := q.db.QueryContext(ctx, listChatUsers, arg.ChatID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatUser
	for rows.Next() {
		var i ChatUser
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.UserID,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChats = `-- name: ListChats :many
SELECT id, name, organisation_id, updated_at, created_at
FROM chats
WHERE organisation_id = $1
`

func (q *Queries) ListChats(ctx context.Context, organisationID string) ([]Chat, error) {
	rows, err := q.db.QueryContext(ctx, listChats, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrganisationID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalCountChats = `-- name: TotalCountChats :one
SELECT count(*)
FROM chats
WHERE organisation_id = $1
`

func (q *Queries) TotalCountChats(ctx context.Context, organisationID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalCountChats, organisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
