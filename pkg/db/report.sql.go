// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: report.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getReport = `-- name: GetReport :one
SELECT id, status, format, kind, "from", "to", meta, filter_tags, file_id, user_id, student_user_id, organisation_id, created_at, deleted_at
FROM reports
WHERE id = $1 AND organisation_id = $2
`

type GetReportParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) GetReport(ctx context.Context, arg GetReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, arg.ID, arg.OrganisationID)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Format,
		&i.Kind,
		&i.From,
		&i.To,
		&i.Meta,
		pq.Array(&i.FilterTags),
		&i.FileID,
		&i.UserID,
		&i.StudentUserID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listReports = `-- name: ListReports :many
SELECT id, status, format, kind, "from", "to", meta, filter_tags, file_id, user_id, student_user_id, organisation_id, created_at, deleted_at
FROM reports
WHERE organisation_id = $1
LIMIT $2 OFFSET $3
`

type ListReportsParams struct {
	OrganisationID string `json:"organisation_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListReports(ctx context.Context, arg ListReportsParams) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, listReports, arg.OrganisationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Format,
			&i.Kind,
			&i.From,
			&i.To,
			&i.Meta,
			pq.Array(&i.FilterTags),
			&i.FileID,
			&i.UserID,
			&i.StudentUserID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
