// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: competence.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const competenceParents = `-- name: CompetenceParents :many
WITH RECURSIVE parents AS (
    SELECT id, name, competence_id, competence_type, organisation_id, grades, color, curriculum_id, created_at, deleted_at
    FROM competences
    WHERE competences.id = $1 AND competences.organisation_id = $2

    UNION ALL

    SELECT c.id, c.name, c.competence_id, c.competence_type, c.organisation_id, c.grades, c.color, c.curriculum_id, c.created_at, c.deleted_at
    FROM competences c
             INNER JOIN parents p ON p.competence_id = c.id
)
SELECT id, name, competence_id, competence_type, organisation_id, grades, color, curriculum_id, created_at, deleted_at FROM parents WHERE competence_id IS NOT NULL
`

type CompetenceParentsParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisation_id"`
}

type CompetenceParentsRow struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	CompetenceID   sql.NullString `json:"competence_id"`
	CompetenceType CompetenceType `json:"competence_type"`
	OrganisationID string         `json:"organisation_id"`
	Grades         []int32        `json:"grades"`
	Color          sql.NullString `json:"color"`
	CurriculumID   sql.NullString `json:"curriculum_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

func (q *Queries) CompetenceParents(ctx context.Context, arg CompetenceParentsParams) ([]CompetenceParentsRow, error) {
	rows, err := q.db.QueryContext(ctx, competenceParents, arg.ID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompetenceParentsRow
	for rows.Next() {
		var i CompetenceParentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetenceID,
			&i.CompetenceType,
			&i.OrganisationID,
			pq.Array(&i.Grades),
			&i.Color,
			&i.CurriculumID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompetence = `-- name: GetCompetence :one
SELECT id, name, competence_id, competence_type, organisation_id, grades, color, curriculum_id, created_at, deleted_at
FROM competences
WHERE id = $1 AND organisation_id = $2
`

type GetCompetenceParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) GetCompetence(ctx context.Context, arg GetCompetenceParams) (Competence, error) {
	row := q.db.QueryRowContext(ctx, getCompetence, arg.ID, arg.OrganisationID)
	var i Competence
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CompetenceID,
		&i.CompetenceType,
		&i.OrganisationID,
		pq.Array(&i.Grades),
		&i.Color,
		&i.CurriculumID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCompetences = `-- name: ListCompetences :many
SELECT id, name, competence_id, competence_type, organisation_id, grades, color, curriculum_id, created_at, deleted_at
FROM competences
WHERE organisation_id = $1 AND competence_type = ANY($4::competence_type[]) and competence_id = ANY($5::text[])
LIMIT $2 OFFSET $3
`

type ListCompetencesParams struct {
	OrganisationID  string           `json:"organisation_id"`
	Limit           int32            `json:"limit"`
	Offset          int32            `json:"offset"`
	CompetenceTypes []CompetenceType `json:"competence_types"`
	ParentIds       []string         `json:"parent_ids"`
}

func (q *Queries) ListCompetences(ctx context.Context, arg ListCompetencesParams) ([]Competence, error) {
	rows, err := q.db.QueryContext(ctx, listCompetences,
		arg.OrganisationID,
		arg.Limit,
		arg.Offset,
		pq.Array(arg.CompetenceTypes),
		pq.Array(arg.ParentIds),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competence
	for rows.Next() {
		var i Competence
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetenceID,
			&i.CompetenceType,
			&i.OrganisationID,
			pq.Array(&i.Grades),
			&i.Color,
			&i.CurriculumID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
