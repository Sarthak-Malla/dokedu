// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: event.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getEvent = `-- name: GetEvent :one
SELECT id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
FROM events
WHERE id = $1 AND organisation_id = $2
`

type GetEventParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) GetEvent(ctx context.Context, arg GetEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, arg.ID, arg.OrganisationID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		pq.Array(&i.Recurrence),
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
FROM events
WHERE organisation_id = $1
LIMIT $2 OFFSET $3
`

type ListEventsParams struct {
	OrganisationID string `json:"organisation_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.OrganisationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.OrganisationID,
			&i.Title,
			&i.Body,
			&i.StartsAt,
			&i.EndsAt,
			pq.Array(&i.Recurrence),
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
