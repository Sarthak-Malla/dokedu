// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entry_event.sql

package db

import (
	"context"
)

const getEntryEvent = `-- name: GetEntryEvent :one
SELECT id, entry_id, event_id, organisation_id, created_at, deleted_at
FROM entry_events
WHERE id = $1 AND organisation_id = $2
`

type GetEntryEventParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisation_id"`
}

func (q *Queries) GetEntryEvent(ctx context.Context, arg GetEntryEventParams) (EntryEvent, error) {
	row := q.db.QueryRowContext(ctx, getEntryEvent, arg.ID, arg.OrganisationID)
	var i EntryEvent
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.EventID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEntryEvents = `-- name: GetEntryEvents :many
SELECT id, entry_id, event_id, organisation_id, created_at, deleted_at
FROM entry_events
WHERE organisation_id = $1 AND entry_id = $2
`

type GetEntryEventsParams struct {
	OrganisationID string `json:"organisation_id"`
	EntryID        string `json:"entry_id"`
}

func (q *Queries) GetEntryEvents(ctx context.Context, arg GetEntryEventsParams) ([]EntryEvent, error) {
	rows, err := q.db.QueryContext(ctx, getEntryEvents, arg.OrganisationID, arg.EntryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntryEvent
	for rows.Next() {
		var i EntryEvent
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.EventID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
