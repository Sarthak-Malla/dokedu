// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const archiveUser = `-- name: ArchiveUser :one
UPDATE users
SET deleted_at = now()
WHERE id = $1
  AND organisation_id = $2
RETURNING id, role, organisation_id, name, surname, email, password, created_at, deleted_at
`

type ArchiveUserParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) ArchiveUser(ctx context.Context, arg ArchiveUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, archiveUser, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (organisation_id, role, email, name, surname)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, role, organisation_id, name, surname, email, password, created_at, deleted_at
`

type CreateUserParams struct {
	OrganisationID string         `json:"organisationID"`
	Role           UserRole       `json:"role"`
	Email          sql.NullString `json:"email"`
	Name           string         `json:"name"`
	Surname        string         `json:"surname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.OrganisationID,
		arg.Role,
		arg.Email,
		arg.Name,
		arg.Surname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAuthUserByEmail = `-- name: GetAuthUserByEmail :one
SELECT id, role, organisation_id, name, surname, email, password, created_at, deleted_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetAuthUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getAuthUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT id, name, owner_id, allowed_domains, created_at, deleted_at
FROM organisations
WHERE id = $1
`

func (q *Queries) GetOrganisation(ctx context.Context, id string) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisation, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		pq.Array(&i.AllowedDomains),
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, role, organisation_id, name, surname, email, password, created_at, deleted_at
FROM users
WHERE id = $1
  AND organisation_id = $2
`

type GetUserParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT count(*)
FROM users
WHERE email = $2::text
  AND organisation_id = $1
`

type GetUserByEmailParams struct {
	OrganisationID string `json:"organisationID"`
	Email          string `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, arg.OrganisationID, arg.Email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const inviteUserByEmail = `-- name: InviteUserByEmail :one
INSERT INTO users (organisation_id, role, email)
VALUES ($1, $2, $3::text)
RETURNING id, role, organisation_id, name, surname, email, password, created_at, deleted_at
`

type InviteUserByEmailParams struct {
	OrganisationID string   `json:"organisationID"`
	Role           UserRole `json:"role"`
	Email          string   `json:"email"`
}

func (q *Queries) InviteUserByEmail(ctx context.Context, arg InviteUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, inviteUserByEmail, arg.OrganisationID, arg.Role, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, role, organisation_id, name, surname, email, password, created_at, deleted_at
FROM users
WHERE organisation_id = $1
`

func (q *Queries) ListUsers(ctx context.Context, organisationID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.Name,
			&i.Surname,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET (name, surname, updated_at) = ($3, $4, now())
WHERE id = $1
  AND organisation_id = $2
RETURNING id, role, organisation_id, name, surname, email, password, created_at, deleted_at
`

type UpdateUserParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
	Name           string `json:"name"`
	Surname        string `json:"surname"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.OrganisationID,
		arg.Name,
		arg.Surname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
