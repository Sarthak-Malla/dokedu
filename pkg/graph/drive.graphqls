scalar Upload

enum FileType {
    blob
    folder
}

type Bucket {
    id: ID!
    name: String!
    user: User!
    shared: Boolean!
    createdAt: Time!
    deletedAt: Time

    files: [File!]!
}

type File {
    id: ID!
    name: String!
    fileType: FileType!
    MIMEType: String!
    size: Int!
    bucket: Bucket!
    parent: File
    createdAt: Time!
    deletedAt: Time

    files: [File!]!
}

input UserFileFilterInput {
    folderId: String
}

input SharedDriveFilterInput {
    folder: String
}

input FilesFilterInput {
    parentId: String
    bucketId: String
    limit: Int
    offset: Int
}

input MyFilesFilterInput {
    parentId: String
    limit: Int
    offset: Int
}

input BucketFilterInput {
    shared: Boolean
}

type BucketConnection {
    edges: [Bucket!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type FileConnection {
    edges: [File!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

extend type Query {
    buckets(input: BucketFilterInput): BucketConnection!
    bucket(id: ID!): Bucket!

    file(id: ID!): File!
    files(input: FilesFilterInput): FileConnection!

    myFiles(input: MyFilesFilterInput): FileConnection!
    myBucket(id: ID!): Bucket!
}

input FileUploadInput {
    file: Upload!
    """
    The folder to upload the file to if empty the file will be uploaded to the root folder of the user.
    """
    parentId: ID
    """
    The shared drive to upload the file to if empty the file will be uploaded to the root folder of the user.
    """
    bucketId: ID
}

input CreateFolderInput {
    name: String!
    parentId: ID
    bucketId: ID
}

extend type Mutation {
    singleUpload(input: FileUploadInput!): File!
    createFolder(input: CreateFolderInput!): File!
}