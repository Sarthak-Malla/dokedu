scalar Upload

enum FileType {
    blob
    folder
}

type Bucket {
    id: ID!
    name: String!
    user: User!
    shared: Boolean!
    createdAt: Time!
    deletedAt: Time

    files: [File!]!
}

type File {
    id: ID!
    name: String!
    fileType: FileType!
    MIMEType: String!
    size: Int!
    bucket: Bucket!
    parent: File
    createdAt: Time!
    deletedAt: Time

    parents: [File!]!

    files: [File!]!
}

input UserFileFilterInput {
    folderId: String
}

input SharedDriveFilterInput {
    folder: String
}

input FilesFilterInput {
    parentId: String
    bucketId: String
    myBucket: Boolean
}

input MyFilesFilterInput {
    parentId: String
}

input BucketFilterInput {
    shared: Boolean
}

type BucketConnection {
    edges: [Bucket!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type FileConnection {
    edges: [File!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

extend type Query {
    buckets(input: BucketFilterInput, limit: Int, offset: Int): BucketConnection!
    bucket(id: ID!): Bucket!

    file(id: ID!): File!
    files(input: FilesFilterInput, limit: Int, offset: Int): FileConnection!
}

input FileUploadInput {
    file: Upload!
    """
    The folder to upload the file to if empty the file will be uploaded to the root folder of the user.
    """
    parentId: ID
    """
    The shared drive to upload the file to if empty the file will be uploaded to the root folder of the user.
    """
    bucketId: ID
}

input CreateFolderInput {
    name: String!
    parentId: ID
    bucketId: ID
}

input GenerateFileURLInput {
    id: ID!
}

type PreviewFilePayload {
    url: String!
}

type DeleteFilePayload {
    success: Boolean!
    file: File!
}

type DeleteFilesPayload {
    success: Boolean!
    files: [File!]!
}

input DownloadFileInput {
    id: ID!
}

input DownloadFilesInput {
    ids: [ID!]!
}

type DownloadFilePayload {
    url: String!
}

type DownloadFilesPayload {
    """
    The url to download a zip file containing all the files.
    """
    url: String!
}

input RenameFileInput {
    id: ID!
    name: String!
}

input MoveFileInput {
    id: ID!
    targetId: ID!
}

input MoveFilesInput {
    ids: [ID!]!
    targetId: ID!
}

input CopyFileInput {
    id: ID!
    targetId: ID!
}

input CopyFilesInput {
    ids: [ID!]!
    targetId: ID!
}

input DeleteFileInput {
    id: ID!
}

input DeleteFilesInput {
    ids: [ID!]!
}

type MoveFilesPayload {
    files: [File!]!
}

type CopyFilesPayload {
    files: [File!]!
}

type UploadFilesPayload {
    files: [File!]!
}

input PreviewFileInput {
    id: ID!
}

# file permission: Viewer, Manager
enum FilePermission {
    Viewer
    Manager
}

input ShareFileInput {
    fileId: ID!
    users: [ID!]!
    emails: [String!]!
    permission: FilePermission!
}

extend type Mutation {
    uploadFile(input: FileUploadInput!): File!
    uploadFiles(input: FileUploadInput!): UploadFilesPayload!

    createFolder(input: CreateFolderInput!): File!

    renameFile(input: RenameFileInput!): File!

    moveFile(input: MoveFileInput!): File!
    moveFiles(input: MoveFilesInput!): MoveFilesPayload!

    copyFile(input: CopyFileInput!): File!
    copyFiles(input: CopyFilesInput!): CopyFilesPayload!

    deleteFile(input: DeleteFileInput!): DeleteFilePayload!
    deleteFiles(input: DeleteFilesInput!): DeleteFilesPayload!

    previewFile(input: PreviewFileInput!): PreviewFilePayload!
    downloadFile(input: DownloadFileInput!): DownloadFilePayload!
    downloadFiles(input: DownloadFilesInput!): DownloadFilesPayload!

    addFileShare(input: ShareFileInput!): File!
    removeFileShare(input: ID!): File!
}