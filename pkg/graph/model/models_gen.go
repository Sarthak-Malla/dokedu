// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"example/pkg/db"
	"fmt"
	"io"
	"strconv"
	"time"
)

type ArchiveEventInput struct {
	ID string `json:"id"`
}

type CompetenceConnection struct {
	Edges      []*db.Competence `json:"edges,omitempty"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type CompetenceFilterInput struct {
	CompetenceType []db.CompetenceType `json:"competenceType,omitempty"`
	Grades         []int               `json:"grades,omitempty"`
}

type CreateEntryEventInput struct {
	EntryID string `json:"entryId"`
	EventID string `json:"eventId"`
}

type CreateEntryFileInput struct {
	EntryID string `json:"entryId"`
	FileID  string `json:"fileId"`
}

type CreateEntryInput struct {
	Date            time.Time                         `json:"date"`
	Body            string                            `json:"body"`
	UserIds         []string                          `json:"userIds"`
	TagIds          []string                          `json:"tagIds"`
	EventIds        []string                          `json:"eventIds"`
	FileIds         []string                          `json:"fileIds"`
	UserCompetences []*CreateEntryUserCompetenceInput `json:"userCompetences"`
}

type CreateEntryTagInput struct {
	EntryID string `json:"entryId"`
	TagID   string `json:"tagId"`
}

type CreateEntryUserCompetenceInput struct {
	EntryID      string `json:"entryId"`
	UserID       string `json:"userId"`
	CompetenceID string `json:"competenceId"`
	Level        int    `json:"level"`
}

type CreateEntryUserInput struct {
	EntryID string `json:"entryId"`
	UserID  string `json:"userId"`
}

type CreateEventCompetenceInput struct {
	EventID      string `json:"eventId"`
	CompetenceID string `json:"competenceId"`
}

type CreateEventInput struct {
	Title    string    `json:"title"`
	Body     string    `json:"body"`
	StartsAt time.Time `json:"startsAt"`
	EndsAt   time.Time `json:"endsAt"`
}

type CreateReportInput struct {
	Type       db.ReportType `json:"type"`
	FilterTags []string      `json:"filterTags"`
	StudentID  string        `json:"studentId"`
	From       time.Time     `json:"from"`
	To         time.Time     `json:"to"`
}

type CreateTagInput struct {
	Name string `json:"name"`
}

type CreateUserInput struct {
	FirstName string      `json:"firstName"`
	LastName  string      `json:"lastName"`
	Email     string      `json:"email"`
	Role      db.UserRole `json:"role"`
	Birthday  *time.Time  `json:"birthday,omitempty"`
	LeftAt    *time.Time  `json:"leftAt,omitempty"`
	JoinedAt  *time.Time  `json:"joinedAt,omitempty"`
}

type EntryConnection struct {
	Edges      []*db.Entry `json:"edges,omitempty"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type EntryFilterInput struct {
	UserIds       []string `json:"userIds,omitempty"`
	TagIds        []string `json:"tagIds,omitempty"`
	EventIds      []string `json:"eventIds,omitempty"`
	CompetenceIds []string `json:"competenceIds,omitempty"`
}

type EntryUserCompetenceConnection struct {
	Edges      []*db.EntryUserCompetence `json:"edges,omitempty"`
	PageInfo   *PageInfo                 `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

type EventConnection struct {
	Edges      []*db.Event `json:"edges,omitempty"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type EventFilterInput struct {
	StartsAt     *time.Time `json:"startsAt,omitempty"`
	EndsAt       *time.Time `json:"endsAt,omitempty"`
	ShowArchived *bool      `json:"showArchived,omitempty"`
}

type InviteUserInput struct {
	Email string      `json:"email"`
	Role  db.UserRole `json:"role"`
}

type OrganisationConnection struct {
	Edges      []*db.Organisation `json:"edges,omitempty"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
	CurrentPage     int  `json:"currentPage"`
}

type ReportConnection struct {
	Edges      []*db.Report `json:"edges,omitempty"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInPayload struct {
	Token string `json:"token"`
}

type SignUpInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type TagConnection struct {
	Edges      []*db.Tag `json:"edges,omitempty"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
}

type UpdateEntryInput struct {
	ID              string                            `json:"id"`
	Date            *time.Time                        `json:"date,omitempty"`
	Body            *string                           `json:"body,omitempty"`
	UserIds         []string                          `json:"userIds,omitempty"`
	TagIds          []string                          `json:"tagIds,omitempty"`
	EventIds        []string                          `json:"eventIds,omitempty"`
	FileIds         []string                          `json:"fileIds,omitempty"`
	UserCompetences []*UpdateEntryUserCompetenceInput `json:"userCompetences,omitempty"`
}

type UpdateEntryUserCompetenceInput struct {
	ID           string  `json:"id"`
	UserID       *string `json:"userId,omitempty"`
	CompetenceID *string `json:"competenceId,omitempty"`
	Level        *int    `json:"level,omitempty"`
}

type UpdateEntryUserCompetenceLevelInput struct {
	ID    string `json:"id"`
	Level *int   `json:"level,omitempty"`
}

type UpdateEventInput struct {
	ID       string     `json:"id"`
	Title    *string    `json:"title,omitempty"`
	Body     *string    `json:"body,omitempty"`
	StartsAt *time.Time `json:"startsAt,omitempty"`
	EndsAt   *time.Time `json:"endsAt,omitempty"`
}

type UpdateTagInput struct {
	ID    string  `json:"id"`
	Name  *string `json:"name,omitempty"`
	Color *string `json:"color,omitempty"`
}

type UpdateUserInput struct {
	ID        string       `json:"id"`
	FirstName *string      `json:"firstName,omitempty"`
	LastName  *string      `json:"lastName,omitempty"`
	Email     *string      `json:"email,omitempty"`
	Role      *db.UserRole `json:"role,omitempty"`
	Birthday  *time.Time   `json:"birthday,omitempty"`
	LeftAt    *time.Time   `json:"leftAt,omitempty"`
	JoinedAt  *time.Time   `json:"joinedAt,omitempty"`
}

type UserConnection struct {
	Edges      []*db.User `json:"edges,omitempty"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type UserFilterInput struct {
	Role []*db.UserRole `json:"role,omitempty"`
}

type ReportFormat string

const (
	ReportFormatPDF  ReportFormat = "pdf"
	ReportFormatDocx ReportFormat = "docx"
)

var AllReportFormat = []ReportFormat{
	ReportFormatPDF,
	ReportFormatDocx,
}

func (e ReportFormat) IsValid() bool {
	switch e {
	case ReportFormatPDF, ReportFormatDocx:
		return true
	}
	return false
}

func (e ReportFormat) String() string {
	return string(e)
}

func (e *ReportFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportFormat", str)
	}
	return nil
}

func (e ReportFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
