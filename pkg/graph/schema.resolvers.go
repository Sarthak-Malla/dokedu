package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"encoding/json"
	"errors"
	"example/pkg/db"
	"example/pkg/graph/model"
	"example/pkg/helper"
	"fmt"
	"strings"
	"time"
)

// Type is the resolver for the type field.
func (r *competenceResolver) Type(ctx context.Context, obj *db.Competence) (db.CompetenceType, error) {
	return obj.CompetenceType, nil
}

// Color is the resolver for the color field.
func (r *competenceResolver) Color(ctx context.Context, obj *db.Competence) (*string, error) {
	if obj.Color.Valid {
		return &obj.Color.String, nil
	}

	return nil, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *competenceResolver) DeletedAt(ctx context.Context, obj *db.Competence) (*time.Time, error) {
	if obj.DeletedAt.Valid {
		return &obj.DeletedAt.Time, nil
	}

	return nil, nil
}

// Parents is the resolver for the parents field.
func (r *competenceResolver) Parents(ctx context.Context, obj *db.Competence) ([]*db.Competence, error) {
	panic(fmt.Errorf("not implemented: Parents - parents"))
}

// Body is the resolver for the body field.
func (r *entryResolver) Body(ctx context.Context, obj *db.Entry) (string, error) {
	var body string

	if err := json.Unmarshal(obj.Body, &body); err != nil {
		return "", err
	}

	return body, nil
}

// User is the resolver for the user field.
func (r *entryResolver) User(ctx context.Context, obj *db.Entry) (*db.User, error) {
	c := ctx.(helper.HTTPContext)

	user, err := r.DB.GetUser(ctx, db.GetUserParams{
		ID:             obj.UserID,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryResolver) DeletedAt(ctx context.Context, obj *db.Entry) (*time.Time, error) {
	if obj.DeletedAt.Valid {
		return &obj.DeletedAt.Time, nil
	}

	return nil, nil
}

// Tags is the resolver for the tags field.
func (r *entryResolver) Tags(ctx context.Context, obj *db.Entry) ([]*db.Tag, error) {
	c := ctx.(helper.HTTPContext)

	tags, err := r.DB.ListTagsFromEntry(ctx, db.ListTagsFromEntryParams{
		EntryID:        obj.ID,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	// wrap tags in a slice of pointers
	var tagsPtr []*db.Tag

	for _, tag := range tags {
		tagsPtr = append(tagsPtr, &tag)
	}

	return tagsPtr, nil
}

// Files is the resolver for the files field.
func (r *entryResolver) Files(ctx context.Context, obj *db.Entry) ([]*db.File, error) {
	c := ctx.(helper.HTTPContext)

	files, err := r.DB.ListFilesFromEntry(ctx, db.ListFilesFromEntryParams{
		EntryID:        obj.ID,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	// wrap files in a slice of pointers
	var filesPtr []*db.File

	for _, file := range files {
		filesPtr = append(filesPtr, &file)
	}

	return filesPtr, nil
}

// Events is the resolver for the events field.
func (r *entryResolver) Events(ctx context.Context, obj *db.Entry) ([]*db.Event, error) {
	c := ctx.(helper.HTTPContext)

	events, err := r.DB.ListEventsFromEntry(ctx, db.ListEventsFromEntryParams{
		EntryID:        obj.ID,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	// wrap events in a slice of pointers
	var eventsPtr []*db.Event

	for _, event := range events {
		eventsPtr = append(eventsPtr, &event)
	}

	return eventsPtr, nil
}

// Users is the resolver for the users field.
func (r *entryResolver) Users(ctx context.Context, obj *db.Entry) ([]*db.User, error) {
	c := ctx.(helper.HTTPContext)

	users, err := r.DB.ListUsersFromEntry(ctx, db.ListUsersFromEntryParams{
		EntryID:        obj.ID,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	// wrap users in a slice of pointers
	var usersPtr []*db.User

	for _, user := range users {
		usersPtr = append(usersPtr, &user)
	}

	return usersPtr, nil
}

// UserCompetences is the resolver for the userCompetences field.
func (r *entryResolver) UserCompetences(ctx context.Context, obj *db.Entry) ([]*db.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: UserCompetences - userCompetences"))
}

// Entry is the resolver for the entry field.
func (r *entryEventResolver) Entry(ctx context.Context, obj *db.EntryEvent) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// Event is the resolver for the event field.
func (r *entryEventResolver) Event(ctx context.Context, obj *db.EntryEvent) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Entry is the resolver for the entry field.
func (r *entryFileResolver) Entry(ctx context.Context, obj *db.EntryFile) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// File is the resolver for the file field.
func (r *entryFileResolver) File(ctx context.Context, obj *db.EntryFile) (*db.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// Entry is the resolver for the entry field.
func (r *entryTagResolver) Entry(ctx context.Context, obj *db.EntryTag) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// Tag is the resolver for the tag field.
func (r *entryTagResolver) Tag(ctx context.Context, obj *db.EntryTag) (*db.Tag, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Entry is the resolver for the entry field.
func (r *entryUserResolver) Entry(ctx context.Context, obj *db.EntryUser) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// User is the resolver for the user field.
func (r *entryUserResolver) User(ctx context.Context, obj *db.EntryUser) (*db.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// User is the resolver for the user field.
func (r *entryUserCompetenceResolver) User(ctx context.Context, obj *db.EntryUserCompetence) (*db.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Entry is the resolver for the entry field.
func (r *entryUserCompetenceResolver) Entry(ctx context.Context, obj *db.EntryUserCompetence) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// Competence is the resolver for the competence field.
func (r *entryUserCompetenceResolver) Competence(ctx context.Context, obj *db.EntryUserCompetence) (*db.Competence, error) {
	panic(fmt.Errorf("not implemented: Competence - competence"))
}

// Recurrence is the resolver for the recurrence field.
func (r *eventResolver) Recurrence(ctx context.Context, obj *db.Event) (*string, error) {
	panic(fmt.Errorf("not implemented: Recurrence - recurrence"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *eventResolver) DeletedAt(ctx context.Context, obj *db.Event) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Competences is the resolver for the competences field.
func (r *eventResolver) Competences(ctx context.Context, obj *db.Event) ([]*db.Competence, error) {
	panic(fmt.Errorf("not implemented: Competences - competences"))
}

// Event is the resolver for the event field.
func (r *eventCompetenceResolver) Event(ctx context.Context, obj *db.EventCompetence) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Competence is the resolver for the competence field.
func (r *eventCompetenceResolver) Competence(ctx context.Context, obj *db.EventCompetence) (*db.Competence, error) {
	panic(fmt.Errorf("not implemented: Competence - competence"))
}

// Kind is the resolver for the kind field.
func (r *fileResolver) Kind(ctx context.Context, obj *db.File) (string, error) {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// Name is the resolver for the name field.
func (r *fileResolver) Name(ctx context.Context, obj *db.File) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// MimeType is the resolver for the mimeType field.
func (r *fileResolver) MimeType(ctx context.Context, obj *db.File) (string, error) {
	panic(fmt.Errorf("not implemented: MimeType - mimeType"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *fileResolver) DeletedAt(ctx context.Context, obj *db.File) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.SignInPayload, error) {
	panic(fmt.Errorf("not implemented: SignIn - signIn"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*db.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*db.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// InviteUser is the resolver for the inviteUser field.
func (r *mutationResolver) InviteUser(ctx context.Context, input model.InviteUserInput) (*db.User, error) {
	c := ctx.(helper.HTTPContext)

	organisation, err := r.DB.GetOrganisation(ctx, c.Claims.User.OrganisationID)

	if err != nil {
		return nil, err
	}

	if input.Email == "" {
		return nil, errors.New("email is required")
	}

	// check if the email is in the allowed domains
	if isStringInArray(input.Email, organisation.AllowedDomains) {
		return nil, errors.New("email is not in the allowed domains (allowed domains: " + strings.Join(organisation.AllowedDomains, ", ") + ")")
	}

	// check if the email is already in the database
	count, err := r.DB.GetUserByEmail(ctx, db.GetUserByEmailParams{
		OrganisationID: "1",
		Email:          input.Email,
	})

	if err != nil {
		return nil, err
	}

	if count > 0 {
		return nil, errors.New("email is already in the database")
	}

	// create a new user
	user, err := r.DB.InviteUserByEmail(ctx, db.InviteUserByEmailParams{
		OrganisationID: "1",
		Email:          input.Email,
		Role:           input.Role,
	})

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// ArchiveUser is the resolver for the archiveUser field.
func (r *mutationResolver) ArchiveUser(ctx context.Context, id string) (*db.User, error) {
	c := ctx.(helper.HTTPContext)

	// check if the user is allowed to archive the user (only admins or higher can archive users)
	if c.Claims.User.Role != db.UserRoleAdmin && c.Claims.User.Role != db.UserRoleOwner {
		return nil, errors.New("you are not allowed to archive users")
	}

	// check whether the user is already archived
	user, err := r.DB.GetUser(ctx, db.GetUserParams{
		ID:             id,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	if !user.DeletedAt.Valid {
		return nil, errors.New("user is already archived")
	}

	// archive the user
	user, err = r.DB.ArchiveUser(ctx, db.ArchiveUserParams{
		ID:             id,
		OrganisationID: c.Claims.User.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// CreateEntry is the resolver for the createEntry field.
func (r *mutationResolver) CreateEntry(ctx context.Context, input *model.CreateEntryInput) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: CreateEntry - createEntry"))
}

// UpdateEntry is the resolver for the updateEntry field.
func (r *mutationResolver) UpdateEntry(ctx context.Context, input *model.UpdateEntryInput) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: UpdateEntry - updateEntry"))
}

// ArchiveEntry is the resolver for the archiveEntry field.
func (r *mutationResolver) ArchiveEntry(ctx context.Context, id string) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: ArchiveEntry - archiveEntry"))
}

// DeleteEntryTag is the resolver for the deleteEntryTag field.
func (r *mutationResolver) DeleteEntryTag(ctx context.Context, id string) (*db.EntryTag, error) {
	panic(fmt.Errorf("not implemented: DeleteEntryTag - deleteEntryTag"))
}

// DeleteEntryEvent is the resolver for the deleteEntryEvent field.
func (r *mutationResolver) DeleteEntryEvent(ctx context.Context, id string) (*db.EntryEvent, error) {
	panic(fmt.Errorf("not implemented: DeleteEntryEvent - deleteEntryEvent"))
}

// DeleteEntryFile is the resolver for the deleteEntryFile field.
func (r *mutationResolver) DeleteEntryFile(ctx context.Context, id string) (*db.EntryFile, error) {
	panic(fmt.Errorf("not implemented: DeleteEntryFile - deleteEntryFile"))
}

// DeleteEntryUser is the resolver for the deleteEntryUser field.
func (r *mutationResolver) DeleteEntryUser(ctx context.Context, id string) (*db.EntryUser, error) {
	panic(fmt.Errorf("not implemented: DeleteEntryUser - deleteEntryUser"))
}

// DeleteEntryUserCompetence is the resolver for the deleteEntryUserCompetence field.
func (r *mutationResolver) DeleteEntryUserCompetence(ctx context.Context, id string) (*db.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: DeleteEntryUserCompetence - deleteEntryUserCompetence"))
}

// CreateEntryTag is the resolver for the createEntryTag field.
func (r *mutationResolver) CreateEntryTag(ctx context.Context, input *model.CreateEntryTagInput) (*db.EntryTag, error) {
	panic(fmt.Errorf("not implemented: CreateEntryTag - createEntryTag"))
}

// CreateEntryEvent is the resolver for the createEntryEvent field.
func (r *mutationResolver) CreateEntryEvent(ctx context.Context, input *model.CreateEntryEventInput) (*db.EntryEvent, error) {
	panic(fmt.Errorf("not implemented: CreateEntryEvent - createEntryEvent"))
}

// CreateEntryFile is the resolver for the createEntryFile field.
func (r *mutationResolver) CreateEntryFile(ctx context.Context, input *model.CreateEntryFileInput) (*db.EntryFile, error) {
	panic(fmt.Errorf("not implemented: CreateEntryFile - createEntryFile"))
}

// CreateEntryUser is the resolver for the createEntryUser field.
func (r *mutationResolver) CreateEntryUser(ctx context.Context, input *model.CreateEntryUserInput) (*db.EntryUser, error) {
	panic(fmt.Errorf("not implemented: CreateEntryUser - createEntryUser"))
}

// CreateEntryUserCompetence is the resolver for the createEntryUserCompetence field.
func (r *mutationResolver) CreateEntryUserCompetence(ctx context.Context, input *model.CreateEntryUserCompetenceInput) (*db.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: CreateEntryUserCompetence - createEntryUserCompetence"))
}

// UpdateEntryUserCompetenceLevel is the resolver for the updateEntryUserCompetenceLevel field.
func (r *mutationResolver) UpdateEntryUserCompetenceLevel(ctx context.Context, input model.UpdateEntryUserCompetenceLevelInput) (*db.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: UpdateEntryUserCompetenceLevel - updateEntryUserCompetenceLevel"))
}

// CreateReport is the resolver for the createReport field.
func (r *mutationResolver) CreateReport(ctx context.Context, input model.CreateReportInput) (*db.Report, error) {
	panic(fmt.Errorf("not implemented: CreateReport - createReport"))
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventInput) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input model.UpdateEventInput) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// ArchiveEvent is the resolver for the archiveEvent field.
func (r *mutationResolver) ArchiveEvent(ctx context.Context, input model.ArchiveEventInput) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: ArchiveEvent - archiveEvent"))
}

// CreateEventCompetence is the resolver for the createEventCompetence field.
func (r *mutationResolver) CreateEventCompetence(ctx context.Context, input model.CreateEventCompetenceInput) (*db.EventCompetence, error) {
	panic(fmt.Errorf("not implemented: CreateEventCompetence - createEventCompetence"))
}

// DeleteEventCompetence is the resolver for the deleteEventCompetence field.
func (r *mutationResolver) DeleteEventCompetence(ctx context.Context, id string) (*db.EventCompetence, error) {
	panic(fmt.Errorf("not implemented: DeleteEventCompetence - deleteEventCompetence"))
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.CreateTagInput) (*db.Tag, error) {
	panic(fmt.Errorf("not implemented: CreateTag - createTag"))
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, input *model.UpdateTagInput) (*db.Tag, error) {
	panic(fmt.Errorf("not implemented: UpdateTag - updateTag"))
}

// ArchiveTag is the resolver for the archiveTag field.
func (r *mutationResolver) ArchiveTag(ctx context.Context, id string) (*db.Tag, error) {
	panic(fmt.Errorf("not implemented: ArchiveTag - archiveTag"))
}

// Owner is the resolver for the owner field.
func (r *organisationResolver) Owner(ctx context.Context, obj *db.Organisation) (*db.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*db.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Organisation is the resolver for the organisation field.
func (r *queryResolver) Organisation(ctx context.Context) (*db.Organisation, error) {
	panic(fmt.Errorf("not implemented: Organisation - organisation"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int, filter *model.UserFilterInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*db.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Competences is the resolver for the competences field.
func (r *queryResolver) Competences(ctx context.Context, limit *int, offset *int, filter *model.CompetenceFilterInput) (*model.CompetenceConnection, error) {
	panic(fmt.Errorf("not implemented: Competences - competences"))
}

// Competence is the resolver for the competence field.
func (r *queryResolver) Competence(ctx context.Context, id string) (*db.Competence, error) {
	panic(fmt.Errorf("not implemented: Competence - competence"))
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context, limit *int, offset *int) (*model.ReportConnection, error) {
	panic(fmt.Errorf("not implemented: Reports - reports"))
}

// Report is the resolver for the report field.
func (r *queryResolver) Report(ctx context.Context, id string) (*db.Report, error) {
	panic(fmt.Errorf("not implemented: Report - report"))
}

// Entries is the resolver for the entries field.
func (r *queryResolver) Entries(ctx context.Context, limit *int, offset *int, filter *model.EntryFilterInput) (*model.EntryConnection, error) {
	panic(fmt.Errorf("not implemented: Entries - entries"))
}

// Entry is the resolver for the entry field.
func (r *queryResolver) Entry(ctx context.Context, id string) (*db.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, limit *int, offset *int) (*model.TagConnection, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*db.Tag, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, limit *int, offset *int, filter *model.EventFilterInput) (*model.EventConnection, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*db.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// SearchCompetences is the resolver for the searchCompetences field.
func (r *queryResolver) SearchCompetences(ctx context.Context, query string) ([]*model.CompetenceConnection, error) {
	panic(fmt.Errorf("not implemented: SearchCompetences - searchCompetences"))
}

// Format is the resolver for the format field.
func (r *reportResolver) Format(ctx context.Context, obj *db.Report) (model.ReportFormat, error) {
	panic(fmt.Errorf("not implemented: Format - format"))
}

// User is the resolver for the user field.
func (r *reportResolver) User(ctx context.Context, obj *db.Report) (*db.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Tags is the resolver for the tags field.
func (r *reportResolver) Tags(ctx context.Context, obj *db.Report) ([]string, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Student is the resolver for the student field.
func (r *reportResolver) Student(ctx context.Context, obj *db.Report) (*db.User, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *tagResolver) DeletedAt(ctx context.Context, obj *db.Tag) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Email is the resolver for the email field.
func (r *userResolver) Email(ctx context.Context, obj *db.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *db.User) (*db.File, error) {
	panic(fmt.Errorf("not implemented: Avatar - avatar"))
}

// Birthday is the resolver for the birthday field.
func (r *userResolver) Birthday(ctx context.Context, obj *db.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: Birthday - birthday"))
}

// LeftAt is the resolver for the leftAt field.
func (r *userResolver) LeftAt(ctx context.Context, obj *db.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: LeftAt - leftAt"))
}

// JoinedAt is the resolver for the joinedAt field.
func (r *userResolver) JoinedAt(ctx context.Context, obj *db.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: JoinedAt - joinedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *userResolver) DeletedAt(ctx context.Context, obj *db.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Competence returns CompetenceResolver implementation.
func (r *Resolver) Competence() CompetenceResolver { return &competenceResolver{r} }

// Entry returns EntryResolver implementation.
func (r *Resolver) Entry() EntryResolver { return &entryResolver{r} }

// EntryEvent returns EntryEventResolver implementation.
func (r *Resolver) EntryEvent() EntryEventResolver { return &entryEventResolver{r} }

// EntryFile returns EntryFileResolver implementation.
func (r *Resolver) EntryFile() EntryFileResolver { return &entryFileResolver{r} }

// EntryTag returns EntryTagResolver implementation.
func (r *Resolver) EntryTag() EntryTagResolver { return &entryTagResolver{r} }

// EntryUser returns EntryUserResolver implementation.
func (r *Resolver) EntryUser() EntryUserResolver { return &entryUserResolver{r} }

// EntryUserCompetence returns EntryUserCompetenceResolver implementation.
func (r *Resolver) EntryUserCompetence() EntryUserCompetenceResolver {
	return &entryUserCompetenceResolver{r}
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// EventCompetence returns EventCompetenceResolver implementation.
func (r *Resolver) EventCompetence() EventCompetenceResolver { return &eventCompetenceResolver{r} }

// File returns FileResolver implementation.
func (r *Resolver) File() FileResolver { return &fileResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organisation returns OrganisationResolver implementation.
func (r *Resolver) Organisation() OrganisationResolver { return &organisationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Report returns ReportResolver implementation.
func (r *Resolver) Report() ReportResolver { return &reportResolver{r} }

// Tag returns TagResolver implementation.
func (r *Resolver) Tag() TagResolver { return &tagResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type competenceResolver struct{ *Resolver }
type entryResolver struct{ *Resolver }
type entryEventResolver struct{ *Resolver }
type entryFileResolver struct{ *Resolver }
type entryTagResolver struct{ *Resolver }
type entryUserResolver struct{ *Resolver }
type entryUserCompetenceResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type eventCompetenceResolver struct{ *Resolver }
type fileResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type organisationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type reportResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

func isStringInArray(str string, arr []string) bool {
	for _, s := range arr {
		if str == s {
			return true
		}
	}
	return false
}
