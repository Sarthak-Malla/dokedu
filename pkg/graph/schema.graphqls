# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Organisation {
    id: ID!
    name: String!
    owner: User!
}

enum UserRole {
    owner
    admin
    teacher
    educator
    student
}

type User {
    id: ID!
    email: String
    role: UserRole!

    firstName: String!
    lastName: String!

    createdAt: Time!
    deletedAt: Time
}

type Chat {
    id: ID!
    name: String
    chatUsers: [ChatUser!]!
    chatMessages: [ChatMessage!]!
}

type ChatUser {
    id: ID!
    chat: Chat!
    user: User!
}

type ChatMessage {
    id: ID!
    chat: Chat!
    user: User!
    message: String!
    createdAt: Time!
}

input SignInInput {
    email: String!
    password: String!
}

type SignInPayload {
    token: String!
}

input SignUpInput {
    name: String!
    email: String!
    password: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    currentPage: Int!
}

type OrganisationConnection {
    edges: [Organisation]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserConnection {
    edges: [User]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ChatConnection {
    edges: [Chat]
    pageInfo: PageInfo!
    totalCount: Int!
}

# user filter input
input UserFilterInput {
    role: [UserRole]
}


type Query {
    organisation: Organisation!

    users(limit: Int, offset: Int, filter: UserFilterInput): UserConnection!
    user(id: ID!): User!

    chats(limit: Int, offset: Int): ChatConnection!
}

input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    role: UserRole!

    birthday: Time
    leftAt: Time
    joinedAt: Time
}

input UpdateUserInput {
    id: ID!
    firstName: String!
    lastName: String!
    email: String
    birthday: Time
    leftAt: Time
    joinedAt: Time
}

type Mutation {
    signIn(input: SignInInput!): SignInPayload!
    signUp(input: SignUpInput!): SignInPayload!

    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    inviteUser(input: CreateUserInput!): User!
    archiveUser(id: ID!): User!
}
