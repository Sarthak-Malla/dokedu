package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"example/pkg/db"
	"example/pkg/graph/model"
	"example/pkg/helper"
	"example/pkg/middleware"
	"fmt"
)

// CreateSubject is the resolver for the createSubject field.
func (r *mutationResolver) CreateSubject(ctx context.Context, input model.CreateSubjectInput) (*db.Subject, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var subject db.Subject
	subject.Name = input.Name
	subject.OrganisationID = currentUser.OrganisationID

	err = r.DB.NewInsert().Model(&subject).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &subject, nil
}

// UpdateSubject is the resolver for the updateSubject field.
func (r *mutationResolver) UpdateSubject(ctx context.Context, input model.UpdateSubjectInput) (*db.Subject, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var subject db.Subject
	subject.Name = input.Name
	err = r.DB.NewUpdate().Model(&subject).Where("organisation_id = ?", currentUser.OrganisationID).Column("name").Where("id = ?", input.ID).Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &subject, nil
}

// DeleteSubject is the resolver for the deleteSubject field.
func (r *mutationResolver) DeleteSubject(ctx context.Context, id string) (*db.Subject, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var subject db.Subject
	err = r.DB.NewDelete().Model(&subject).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", id).Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &subject, nil
}

// CreateSchoolYear is the resolver for the createSchoolYear field.
func (r *mutationResolver) CreateSchoolYear(ctx context.Context, input model.CreateSchoolYearInput) (*db.SchoolYear, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var schoolYear db.SchoolYear
	schoolYear.Year = input.Year
	schoolYear.OrganisationID = currentUser.OrganisationID

	err = r.DB.NewInsert().Model(&schoolYear).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &schoolYear, nil
}

// UpdateSchoolYear is the resolver for the updateSchoolYear field.
func (r *mutationResolver) UpdateSchoolYear(ctx context.Context, input model.UpdateSchoolYearInput) (*db.SchoolYear, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var schoolYear db.SchoolYear
	schoolYear.Year = input.Year
	err = r.DB.NewUpdate().Model(&schoolYear).Where("organisation_id = ?", currentUser.OrganisationID).Column("year").Where("id = ?", input.ID).Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &schoolYear, nil
}

// DeleteSchoolYear is the resolver for the deleteSchoolYear field.
func (r *mutationResolver) DeleteSchoolYear(ctx context.Context, id string) (*db.SchoolYear, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var schoolYear db.SchoolYear
	err = r.DB.NewDelete().Model(&schoolYear).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", id).Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &schoolYear, nil
}

// UpdateUserStudentGrade is the resolver for the updateUserStudentGrade field.
func (r *mutationResolver) UpdateUserStudentGrade(ctx context.Context, input model.UpdateUserStudentGradesInput) (*db.UserStudentGrades, error) {
	panic(fmt.Errorf("not implemented: UpdateUserStudentGrade - updateUserStudentGrade"))
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context, limit *int, offset *int) (*model.SubjectConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var subjects []*db.Subject
	count, err := r.DB.
		NewSelect().
		Model(&subjects).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Order("name").
		Limit(pageLimit).
		Offset(pageOffset).
		ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	pageInfo, err := helper.CreatePageInfo(pageLimit, pageOffset, count)
	if err != nil {
		return nil, err
	}

	return &model.SubjectConnection{
		Edges:      subjects,
		PageInfo:   pageInfo,
		TotalCount: count,
	}, nil
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id string) (*db.Subject, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var subject db.Subject
	err = r.DB.NewSelect().Model(&subject).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", id).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &subject, nil
}

// SchoolYears is the resolver for the SchoolYears field.
func (r *queryResolver) SchoolYears(ctx context.Context, limit *int, offset *int) (*model.SchoolYearConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	if limit != nil {
		pageLimit = *limit
	}
	if offset != nil {
		pageOffset = *offset
	}

	var schoolYears []*db.SchoolYear
	count, err := r.DB.
		NewSelect().
		Model(&schoolYears).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Order("year DESC").
		Limit(pageLimit).
		Offset(pageOffset).
		ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	pageInfo, err := helper.CreatePageInfo(pageLimit, pageOffset, count)
	if err != nil {
		return nil, err
	}

	return &model.SchoolYearConnection{
		Edges:    schoolYears,
		PageInfo: pageInfo,
	}, nil
}

// SchoolYear is the resolver for the SchoolYear field.
func (r *queryResolver) SchoolYear(ctx context.Context, id string) (*db.SchoolYear, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var schoolYear db.SchoolYear
	err = r.DB.NewSelect().Model(&schoolYear).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", id).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &schoolYear, nil
}

// UserStudentGrades is the resolver for the userStudentGrades field.
func (r *queryResolver) UserStudentGrades(ctx context.Context, limit *int, offset *int) (*model.UserStudentGradesConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var userStudentGrades []*db.UserStudentGrades
	count, err := r.DB.
		NewSelect().
		Model(&userStudentGrades).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Limit(pageLimit).
		Offset(pageOffset).
		ScanAndCount(ctx)

	if err != nil {
		return nil, err
	}

	pageInfo, err := helper.CreatePageInfo(pageLimit, pageOffset, count)
	if err != nil {
		return nil, err
	}

	return &model.UserStudentGradesConnection{
		Edges:    userStudentGrades,
		PageInfo: pageInfo,
	}, nil
}

// UserStudentGrade is the resolver for the userStudentGrade field.
func (r *queryResolver) UserStudentGrade(ctx context.Context, id string) (*db.UserStudentGrades, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var userStudentGrade db.UserStudentGrades
	err = r.DB.NewSelect().Model(&userStudentGrade).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", id).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &userStudentGrade, nil
}

// Student is the resolver for the student field.
func (r *userStudentGradesResolver) Student(ctx context.Context, obj *db.UserStudentGrades) (*db.UserStudent, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var student db.UserStudent
	err = r.DB.NewSelect().Model(&student).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", obj.UserStudentID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &student, nil
}

// Subject is the resolver for the subject field.
func (r *userStudentGradesResolver) Subject(ctx context.Context, obj *db.UserStudentGrades) (*db.Subject, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var subject db.Subject
	err = r.DB.NewSelect().Model(&subject).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", obj.SubjectID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &subject, nil
}

// SchoolYear is the resolver for the schoolYear field.
func (r *userStudentGradesResolver) SchoolYear(ctx context.Context, obj *db.UserStudentGrades) (*db.SchoolYear, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var schoolYear db.SchoolYear
	err = r.DB.NewSelect().Model(&schoolYear).Where("organisation_id = ?", currentUser.OrganisationID).Where("id = ?", obj.SchoolYearID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &schoolYear, nil
}

// UserStudentGrades returns UserStudentGradesResolver implementation.
func (r *Resolver) UserStudentGrades() UserStudentGradesResolver {
	return &userStudentGradesResolver{r}
}

type userStudentGradesResolver struct{ *Resolver }
