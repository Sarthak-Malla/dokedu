enum ReportStatus {
    pending
    processing
    done
    error
}

enum ReportFormat {
    pdf
    docx
}

enum ReportKind {
    entries
    subjects
    competences
    learned_competences
    all_entries
}

type Report {
    id: ID!
    status: ReportStatus!
    format: ReportFormat!
    kind: ReportKind!
    from: Time!
    to: Time!
    meta: String!
    filterTags: [ID!]!
    user: User!
    studentUser: User!
    file: File
    createdAt: Time!
    deletedAt: Time
}

type ReportConnection {
    edges: [Report]
    pageInfo: PageInfo!
    totalCount: Int!
}

extend type Query {
    report(id: ID!): Report!
    reports(limit: Int, offset: Int): ReportConnection!
}

input CreateReportInput {
    format: ReportFormat!
    kind: ReportKind!
    from: Time!
    to: Time!
    filterTags: [ID!]!
    studentUser: ID
    allUsers: Boolean
}

extend type Mutation {
    createReport(input: CreateReportInput!): [Report]!
}

extend type Subscription {
    reportCreatedOrUpdated: Report!
}