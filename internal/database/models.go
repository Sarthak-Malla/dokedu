// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/sqlc-dev/pqtype"
)

type CompetenceType string

const (
	CompetenceTypeSubject    CompetenceType = "subject"
	CompetenceTypeGroup      CompetenceType = "group"
	CompetenceTypeCompetence CompetenceType = "competence"
)

func (e *CompetenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompetenceType(s)
	case string:
		*e = CompetenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for CompetenceType: %T", src)
	}
	return nil
}

type NullCompetenceType struct {
	CompetenceType CompetenceType `json:"competence_type"`
	Valid          bool           `json:"valid"` // Valid is true if CompetenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompetenceType) Scan(value interface{}) error {
	if value == nil {
		ns.CompetenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompetenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompetenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompetenceType), nil
}

type FilePermission string

const (
	FilePermissionViewer  FilePermission = "viewer"
	FilePermissionManager FilePermission = "manager"
)

func (e *FilePermission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilePermission(s)
	case string:
		*e = FilePermission(s)
	default:
		return fmt.Errorf("unsupported scan type for FilePermission: %T", src)
	}
	return nil
}

type NullFilePermission struct {
	FilePermission FilePermission `json:"file_permission"`
	Valid          bool           `json:"valid"` // Valid is true if FilePermission is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilePermission) Scan(value interface{}) error {
	if value == nil {
		ns.FilePermission, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilePermission.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilePermission) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilePermission), nil
}

type FileType string

const (
	FileTypeBlob   FileType = "blob"
	FileTypeFolder FileType = "folder"
)

func (e *FileType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileType(s)
	case string:
		*e = FileType(s)
	default:
		return fmt.Errorf("unsupported scan type for FileType: %T", src)
	}
	return nil
}

type NullFileType struct {
	FileType FileType `json:"file_type"`
	Valid    bool     `json:"valid"` // Valid is true if FileType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFileType) Scan(value interface{}) error {
	if value == nil {
		ns.FileType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FileType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFileType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FileType), nil
}

type ReportFormat string

const (
	ReportFormatDocx ReportFormat = "docx"
	ReportFormatPdf  ReportFormat = "pdf"
	ReportFormatHtml ReportFormat = "html"
	ReportFormatCsv  ReportFormat = "csv"
	ReportFormatXlsx ReportFormat = "xlsx"
)

func (e *ReportFormat) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportFormat(s)
	case string:
		*e = ReportFormat(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportFormat: %T", src)
	}
	return nil
}

type NullReportFormat struct {
	ReportFormat ReportFormat `json:"report_format"`
	Valid        bool         `json:"valid"` // Valid is true if ReportFormat is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportFormat) Scan(value interface{}) error {
	if value == nil {
		ns.ReportFormat, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportFormat.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportFormat) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportFormat), nil
}

type ReportKind string

const (
	ReportKindEntries            ReportKind = "entries"
	ReportKindSubjects           ReportKind = "subjects"
	ReportKindCompetences        ReportKind = "competences"
	ReportKindLearnedCompetences ReportKind = "learned_competences"
	ReportKindAllEntries         ReportKind = "all_entries"
)

func (e *ReportKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportKind(s)
	case string:
		*e = ReportKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportKind: %T", src)
	}
	return nil
}

type NullReportKind struct {
	ReportKind ReportKind `json:"report_kind"`
	Valid      bool       `json:"valid"` // Valid is true if ReportKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportKind) Scan(value interface{}) error {
	if value == nil {
		ns.ReportKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportKind), nil
}

type ReportStatus string

const (
	ReportStatusPending    ReportStatus = "pending"
	ReportStatusProcessing ReportStatus = "processing"
	ReportStatusDone       ReportStatus = "done"
	ReportStatusError      ReportStatus = "error"
)

func (e *ReportStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportStatus(s)
	case string:
		*e = ReportStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportStatus: %T", src)
	}
	return nil
}

type NullReportStatus struct {
	ReportStatus ReportStatus `json:"report_status"`
	Valid        bool         `json:"valid"` // Valid is true if ReportStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReportStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportStatus), nil
}

type UserLang string

const (
	UserLangEn UserLang = "en"
	UserLangDe UserLang = "de"
)

func (e *UserLang) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserLang(s)
	case string:
		*e = UserLang(s)
	default:
		return fmt.Errorf("unsupported scan type for UserLang: %T", src)
	}
	return nil
}

type NullUserLang struct {
	UserLang UserLang `json:"user_lang"`
	Valid    bool     `json:"valid"` // Valid is true if UserLang is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserLang) Scan(value interface{}) error {
	if value == nil {
		ns.UserLang, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserLang.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserLang) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserLang), nil
}

type UserRole string

const (
	UserRoleOwner    UserRole = "owner"
	UserRoleAdmin    UserRole = "admin"
	UserRoleTeacher  UserRole = "teacher"
	UserRoleEducator UserRole = "educator"
	UserRoleStudent  UserRole = "student"
	UserRoleParent   UserRole = "parent"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStudentSchoolHistoryAction string

const (
	UserStudentSchoolHistoryActionEnrolled    UserStudentSchoolHistoryAction = "enrolled"
	UserStudentSchoolHistoryActionGraduated   UserStudentSchoolHistoryAction = "graduated"
	UserStudentSchoolHistoryActionTransferred UserStudentSchoolHistoryAction = "transferred"
	UserStudentSchoolHistoryActionSuspended   UserStudentSchoolHistoryAction = "suspended"
	UserStudentSchoolHistoryActionExpelled    UserStudentSchoolHistoryAction = "expelled"
	UserStudentSchoolHistoryActionRepeated    UserStudentSchoolHistoryAction = "repeated"
	UserStudentSchoolHistoryActionJumped      UserStudentSchoolHistoryAction = "jumped"
)

func (e *UserStudentSchoolHistoryAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStudentSchoolHistoryAction(s)
	case string:
		*e = UserStudentSchoolHistoryAction(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStudentSchoolHistoryAction: %T", src)
	}
	return nil
}

type NullUserStudentSchoolHistoryAction struct {
	UserStudentSchoolHistoryAction UserStudentSchoolHistoryAction `json:"user_student_school_history_action"`
	Valid                          bool                           `json:"valid"` // Valid is true if UserStudentSchoolHistoryAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStudentSchoolHistoryAction) Scan(value interface{}) error {
	if value == nil {
		ns.UserStudentSchoolHistoryAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStudentSchoolHistoryAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStudentSchoolHistoryAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStudentSchoolHistoryAction), nil
}

type Address struct {
	ID             string         `json:"id"`
	Address1       sql.NullString `json:"address_1"`
	Address2       sql.NullString `json:"address_2"`
	Address3       sql.NullString `json:"address_3"`
	PostalCode     sql.NullString `json:"postal_code"`
	City           sql.NullString `json:"city"`
	State          sql.NullString `json:"state"`
	Country        sql.NullString `json:"country"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Bucket struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Shared         bool           `json:"shared"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	UserID         sql.NullString `json:"user_id"`
}

type Chat struct {
	ID             string         `json:"id"`
	Name           sql.NullString `json:"name"`
	OrganisationID string         `json:"organisation_id"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	CreatedAt      time.Time      `json:"created_at"`
}

type ChatMessage struct {
	ID             string       `json:"id"`
	ChatID         string       `json:"chat_id"`
	UserID         string       `json:"user_id"`
	Message        string       `json:"message"`
	OrganisationID string       `json:"organisation_id"`
	UpdatedAt      sql.NullTime `json:"updated_at"`
	CreatedAt      time.Time    `json:"created_at"`
}

type ChatMessageFile struct {
	ID        string       `json:"id"`
	ChatID    string       `json:"chat_id"`
	UserID    string       `json:"user_id"`
	MessageID string       `json:"message_id"`
	FileID    string       `json:"file_id"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	CreatedAt time.Time    `json:"created_at"`
}

type ChatMessageReaction struct {
	ID        string    `json:"id"`
	ChatID    string    `json:"chat_id"`
	UserID    string    `json:"user_id"`
	MessageID string    `json:"message_id"`
	Reaction  string    `json:"reaction"`
	CreatedAt time.Time `json:"created_at"`
}

type ChatUser struct {
	ID             string `json:"id"`
	ChatID         string `json:"chat_id"`
	UserID         string `json:"user_id"`
	OrganisationID string `json:"organisation_id"`
}

type Competence struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	CompetenceID   sql.NullString `json:"competence_id"`
	CompetenceType CompetenceType `json:"competence_type"`
	OrganisationID string         `json:"organisation_id"`
	Grades         []int32        `json:"grades"`
	Color          sql.NullString `json:"color"`
	CurriculumID   sql.NullString `json:"curriculum_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	SortOrder      sql.NullInt32  `json:"sort_order"`
}

type Domain struct {
	ID             string    `json:"id"`
	Name           string    `json:"name"`
	OrganisationID string    `json:"organisation_id"`
	CreatedAt      time.Time `json:"created_at"`
}

type Email struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Address        string         `json:"address"`
	Type           sql.NullString `json:"type"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
}

type EmailAccount struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Secret         sql.NullString `json:"secret"`
	Description    sql.NullString `json:"description"`
	Type           string         `json:"type"`
	Quota          sql.NullInt32  `json:"quota"`
	Active         sql.NullBool   `json:"active"`
	UserID         sql.NullString `json:"user_id"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
}

type EmailForwarding struct {
	ID             string    `json:"id"`
	Origin         string    `json:"origin"`
	Target         string    `json:"target"`
	OrganisationID string    `json:"organisation_id"`
	CreatedAt      time.Time `json:"created_at"`
}

type EmailGroupMember struct {
	ID             string    `json:"id"`
	Name           string    `json:"name"`
	MemberOf       string    `json:"member_of"`
	OrganisationID string    `json:"organisation_id"`
	CreatedAt      time.Time `json:"created_at"`
}

type Entry struct {
	ID             string       `json:"id"`
	Date           time.Time    `json:"date"`
	Body           string       `json:"body"`
	UserID         string       `json:"user_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
	OrganisationID string       `json:"organisation_id"`
}

type EntryEvent struct {
	ID             string       `json:"id"`
	EntryID        string       `json:"entry_id"`
	EventID        string       `json:"event_id"`
	OrganisationID string       `json:"organisation_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
}

type EntryFile struct {
	ID             string       `json:"id"`
	EntryID        string       `json:"entry_id"`
	FileID         string       `json:"file_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
	OrganisationID string       `json:"organisation_id"`
}

type EntryTag struct {
	ID             string       `json:"id"`
	EntryID        string       `json:"entry_id"`
	TagID          string       `json:"tag_id"`
	OrganisationID string       `json:"organisation_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
}

type EntryUser struct {
	ID             string       `json:"id"`
	EntryID        string       `json:"entry_id"`
	UserID         string       `json:"user_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
	OrganisationID string       `json:"organisation_id"`
}

type Event struct {
	ID             string         `json:"id"`
	ImageFileID    sql.NullString `json:"image_file_id"`
	OrganisationID string         `json:"organisation_id"`
	Title          string         `json:"title"`
	Body           string         `json:"body"`
	StartsAt       time.Time      `json:"starts_at"`
	EndsAt         time.Time      `json:"ends_at"`
	Recurrence     []string       `json:"recurrence"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type EventCompetence struct {
	ID             string       `json:"id"`
	EventID        string       `json:"event_id"`
	CompetenceID   string       `json:"competence_id"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
	OrganisationID string       `json:"organisation_id"`
}

type File struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	FileType       FileType       `json:"file_type"`
	MimeType       sql.NullString `json:"mime_type"`
	Size           int64          `json:"size"`
	BucketID       string         `json:"bucket_id"`
	ParentID       sql.NullString `json:"parent_id"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Organisation struct {
	ID             string       `json:"id"`
	Name           string       `json:"name"`
	LegalName      string       `json:"legal_name"`
	Website        string       `json:"website"`
	Phone          string       `json:"phone"`
	OwnerID        string       `json:"owner_id"`
	AllowedDomains []string     `json:"allowed_domains"`
	EnabledApps    []string     `json:"enabled_apps"`
	CreatedAt      time.Time    `json:"created_at"`
	DeletedAt      sql.NullTime `json:"deleted_at"`
	SetupComplete  bool         `json:"setup_complete"`
}

type Report struct {
	ID             string                `json:"id"`
	Status         ReportStatus          `json:"status"`
	Format         ReportFormat          `json:"format"`
	Kind           ReportKind            `json:"kind"`
	From           time.Time             `json:"from"`
	To             time.Time             `json:"to"`
	Meta           pqtype.NullRawMessage `json:"meta"`
	FilterTags     []string              `json:"filter_tags"`
	FileID         sql.NullString        `json:"file_id"`
	UserID         string                `json:"user_id"`
	StudentUserID  string                `json:"student_user_id"`
	OrganisationID string                `json:"organisation_id"`
	CreatedAt      time.Time             `json:"created_at"`
	DeletedAt      sql.NullTime          `json:"deleted_at"`
}

type School struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	AddressID      sql.NullString `json:"address_id"`
	Phone          sql.NullString `json:"phone"`
	Email          sql.NullString `json:"email"`
	Website        sql.NullString `json:"website"`
	Description    sql.NullString `json:"description"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type SchoolYear struct {
	ID             string         `json:"id"`
	Year           int32          `json:"year"`
	Description    sql.NullString `json:"description"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Session struct {
	ID        string       `json:"id"`
	UserID    string       `json:"user_id"`
	Token     string       `json:"token"`
	CreatedAt time.Time    `json:"created_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Share struct {
	ID             string         `json:"id"`
	FileID         sql.NullString `json:"file_id"`
	BucketID       sql.NullString `json:"bucket_id"`
	SharedWith     string         `json:"shared_with"`
	SharedBy       string         `json:"shared_by"`
	Permission     FilePermission `json:"permission"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Subject struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type Tag struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Color          sql.NullString `json:"color"`
	OrganisationID string         `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type User struct {
	ID             string         `json:"id"`
	Role           UserRole       `json:"role"`
	OrganisationID string         `json:"organisation_id"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	Email          sql.NullString `json:"email"`
	Password       sql.NullString `json:"password"`
	RecoveryToken  sql.NullString `json:"recovery_token"`
	RecoverySentAt sql.NullTime   `json:"recovery_sent_at"`
	AvatarFileID   sql.NullString `json:"avatar_file_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	Language       NullUserLang   `json:"language"`
	Sex            sql.NullString `json:"sex"`
}

type UserAddressHistory struct {
	ID             string         `json:"id"`
	UserID         string         `json:"user_id"`
	AddressID      string         `json:"address_id"`
	StartDate      time.Time      `json:"start_date"`
	EndDate        time.Time      `json:"end_date"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type UserCompetence struct {
	ID             string         `json:"id"`
	Level          int32          `json:"level"`
	UserID         string         `json:"user_id"`
	EntryID        sql.NullString `json:"entry_id"`
	CompetenceID   string         `json:"competence_id"`
	CreatedAt      time.Time      `json:"created_at"`
	CreatedBy      sql.NullString `json:"created_by"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	OrganisationID string         `json:"organisation_id"`
}

type UserRelationship struct {
	ID               string         `json:"id"`
	UserID           string         `json:"user_id"`
	StudentID        string         `json:"student_id"`
	RelationshipType string         `json:"relationship_type"`
	OrganisationID   sql.NullString `json:"organisation_id"`
	CreatedAt        time.Time      `json:"created_at"`
	DeletedAt        sql.NullTime   `json:"deleted_at"`
}

type UserStudent struct {
	ID             string         `json:"id"`
	UserID         string         `json:"user_id"`
	OrganisationID string         `json:"organisation_id"`
	LeftAt         sql.NullTime   `json:"left_at"`
	Grade          int32          `json:"grade"`
	Birthday       sql.NullTime   `json:"birthday"`
	Nationality    sql.NullString `json:"nationality"`
	Comments       sql.NullString `json:"comments"`
	JoinedAt       sql.NullTime   `json:"joined_at"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	Birthplace     sql.NullString `json:"birthplace"`
}

type UserStudentGrade struct {
	ID             string         `json:"id"`
	UserStudentID  string         `json:"user_student_id"`
	SubjectID      string         `json:"subject_id"`
	Grade          int32          `json:"grade"`
	SchoolYearID   string         `json:"school_year_id"`
	OrganisationID sql.NullString `json:"organisation_id"`
	CreatedAt      time.Time      `json:"created_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
}

type UserStudentSchoolHistory struct {
	ID             string                         `json:"id"`
	UserStudentID  string                         `json:"user_student_id"`
	SchoolID       string                         `json:"school_id"`
	Action         UserStudentSchoolHistoryAction `json:"action"`
	SchoolYearID   string                         `json:"school_year_id"`
	OrganisationID sql.NullString                 `json:"organisation_id"`
	CreatedAt      time.Time                      `json:"created_at"`
	DeletedAt      sql.NullTime                   `json:"deleted_at"`
}
