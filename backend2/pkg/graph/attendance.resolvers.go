package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/dokedu/dokedu/backend/pkg/services/database/db"
)

// SetUserAttendanceState is the resolver for the setUserAttendanceState field.
func (r *mutationResolver) SetUserAttendanceState(ctx context.Context, userID string, date time.Time, state db.UserAttendanceState) (*db.UserAttendance, error) {
	panic(fmt.Errorf("not implemented: SetUserAttendanceState - setUserAttendanceState"))
}

// UpdateDailyAttendance is the resolver for the updateDailyAttendance field.
func (r *mutationResolver) UpdateDailyAttendance(ctx context.Context, date time.Time, state db.UserAttendanceState) ([]db.UserAttendance, error) {
	panic(fmt.Errorf("not implemented: UpdateDailyAttendance - updateDailyAttendance"))
}

// UserAttendanceOverview is the resolver for the userAttendanceOverview field.
func (r *queryResolver) UserAttendanceOverview(ctx context.Context, date time.Time) ([]db.UserAttendance, error) {
	panic(fmt.Errorf("not implemented: UserAttendanceOverview - userAttendanceOverview"))
}

// User is the resolver for the user field.
func (r *userAttendanceResolver) User(ctx context.Context, obj *db.UserAttendance) (*db.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Date is the resolver for the date field.
func (r *userAttendanceResolver) Date(ctx context.Context, obj *db.UserAttendance) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// UserAttendance returns UserAttendanceResolver implementation.
func (r *Resolver) UserAttendance() UserAttendanceResolver { return &userAttendanceResolver{r} }

type userAttendanceResolver struct{ *Resolver }
